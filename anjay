import os
import numpy as np
from PIL import Image
from flask import Flask, request, jsonify
import logging

try:
    import tensorflow as tf
    from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input
except ModuleNotFoundError:
    raise ImportError("TensorFlow is not installed. Please install it using 'pip install tensorflow'.")

# Configure logging
logging.basicConfig(level=logging.INFO)

# Load pre-trained MobileNetV2 model for image classification
model = MobileNetV2(weights='imagenet')

# Pre-process the image to match the input requirements of MobileNetV2
def prepare_image(image_path):
    try:
        img = Image.open(image_path).resize((224, 224))  # Resize image to 224x224
        img_array = np.array(img)  # Convert image to numpy array
        img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
        return preprocess_input(img_array)  # Preprocess the image for MobileNetV2
    except Exception as e:
        logging.error(f"Error preparing image: {e}")
        raise

# Predict the animal in the image
def predict_animal(image_path):
    try:
        processed_image = prepare_image(image_path)
        predictions = model.predict(processed_image)
        decoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=1)
        return decoded_predictions[0][0]  # Return the top prediction
    except Exception as e:
        logging.error(f"Error in prediction: {e}")
        raise

# Animal database with classification, venomous/dangerous info, and how to get rid of it
animal_info = {
    "cat": {
        "classification": "Kingdom: Animalia, Phylum: Chordata, Class: Mammalia, Order: Carnivora",
        "venomous": "No",
        "dangerous": "No",
        "how_to_get_rid_of": "Use humane traps to relocate the cat."
    },
    "lion": {
        "classification": "Kingdom: Animalia, Phylum: Chordata, Class: Mammalia, Order: Carnivora",
        "venomous": "No",
        "dangerous": "Yes",
        "how_to_get_rid_of": "Contact a local wildlife authority. Do not approach."
    },
    "cobra": {
        "classification": "Kingdom: Animalia, Phylum: Chordata, Class: Reptilia, Order: Squamata",
        "venomous": "Yes",
        "dangerous": "Yes",
        "how_to_get_rid_of": "Call animal control immediately. Do not attempt to handle the snake."
    }
}

# Retrieve animal information from the database
def get_animal_info(animal_name):
    animal_name_lower = animal_name.lower()
    return animal_info.get(animal_name_lower, None)

# Flask web app setup
app = Flask(__name__)

@app.route('/identify', methods=['POST'])
def identify():
    try:
        # Check if the file is part of the request
        if 'file' not in request.files:
            return jsonify({'error': 'No file part'}), 400
        
        file = request.files['file']

        # If no file is selected
        if file.filename == '':
            return jsonify({'error': 'No selected file'}), 400

        # Validate file type
        allowed_extensions = {"jpg", "jpeg", "png"}
        if not ('.' in file.filename and file.filename.rsplit('.', 1)[1].lower() in allowed_extensions):
            return jsonify({'error': 'Invalid file type. Only JPG, JPEG, and PNG are allowed.'}), 400

        # Save the uploaded file
        image_path = os.path.join("uploads", file.filename)
        os.makedirs(os.path.dirname(image_path), exist_ok=True)
        file.save(image_path)

        # Predict the animal in the uploaded image
        animal_prediction = predict_animal(image_path)
        animal_name = animal_prediction[1]

        # Retrieve animal information from the database
        animal_details = get_animal_info(animal_name)

        if animal_details is None:
            return jsonify({'error': 'Animal information not found.'}), 404

        # Return the animal information as a JSON response
        result = {
            "Animal": animal_name,
            "Classification": animal_details['classification'],
            "Venomous": animal_details['venomous'],
            "Dangerous": animal_details['dangerous'],
            "How to get rid of": animal_details['how_to_get_rid_of']
        }

        return jsonify(result)

    except Exception as e:
        logging.error(f"Error processing request: {e}")
        return jsonify({'error': 'An error occurred while processing the request.'}), 500

if __name__ == "__main__":
    app.run(debug=True)
